@page "/Login"
@using global::Service.Service
@layout LoginLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject DialogService DialogService
@inject IAuthService authService
@inject IJSRuntime jsRuntime


<PageTitle>Login</PageTitle>

<RadzenStack Gap="0" class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 400px; overflow: hidden;">
    <RadzenCard class="rz-shadow-0 rz-border-radius-0 rz-background-color-info rz-p-12" style="text-align: center;">
        <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" class="rz-color-white rz-mb-0">Login</RadzenText>
    </RadzenCard>
    <RadzenCard class="rz-shadow-0 rz-p-12">

        @*   <RadzenTemplateForm Data=login>
            <RadzenLogin AllowRegister="false" 
                         AllowResetPassword="false" 
                         UserText="Account"
                         UserRequired="Account is required"
                         PasswordText="Password"
                         PasswordRequired="Password is required"
                         Login=@(args => HandleLogin(args)) 
                         Username="@login.Account" 
                         Password="@login.Password"
                         Register=HandleSignup />
        </RadzenTemplateForm> *@

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="StartGoBack">Go back</RadzenButton>
            <RadzenButton Image="images/microsoft.svg" ButtonStyle="ButtonStyle.Base" Click="StartSSOLogin">
                <span class="rz-button-text">Microsoft account</span>
                <RadzenImage Path="images/microsoft.svg" Style="width: 20px; height: 20px; margin-inline-start: 8px;" />
            </RadzenButton>
        </RadzenStack>

    </RadzenCard>
</RadzenStack>

@if (isShowLoading)
{
    <div class="fullscreen-overlay">
        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Wait</Template>
        </RadzenProgressBarCircular>
    </div>
}

@code {
    private bool isSignup { get; set; } = false;
    private bool value { get; set; } = false;
    private bool isShowLoading { get; set; } = false;

    private SignupResponse signupResponse = new SignupResponse()
    {
        Secret = "",
        QrCode = new byte[0]
    };

    private SignupRequest signup = new SignupRequest()
    {
        Account = "",
        Password = "",
        Secret = ""
    };

    private LoginModelRequest login = new LoginModelRequest()
    {
        Account = "",
        Password = ""
    };

    private async Task OnSwitchChange(bool? value)
    {
        if (value is true)
        {
            await this.HandleInitSignup();
        }
        else
        {
            isSignup = false;
        }
    }

    private async Task HandleLogin(LoginArgs args)
    {
        try
        {
            login.Account = args.Username;
            login.Password = args.Password;

            isShowLoading = true;

            var response = await Http.PostAsJsonAsync("Auth/Login", login);

            if (response.IsSuccessStatusCode)
            {
                var message = await response.Content.ReadAsStringAsync();
                throw new Exception(message);
            }

            var content = await response.Content.ReadAsStringAsync();
            var result = System.Text.Json.JsonSerializer.Deserialize<LoginModelResponse>(content, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            LoginUserInfo loginUserInfo = new LoginUserInfo()
            {
                UserName = login.Account,
                AccessToken = result.Token,
                RefreshToken = result.Token,
                ExpiresAt = DateTime.Now.AddMinutes(30)
            };

            var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateState(loginUserInfo);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            DialogService.Alert(ex.Message);
        }
        finally
        {
            isShowLoading = false;
        }
    }

    private async Task HandleInitSignup()
    {
        var response = await Http.GetFromJsonAsync<SignupResponse>("Auth/Signup");

        if (response != null)
        {
            signupResponse = response;
            isSignup = true;
        }
        else
        {
            isSignup = false;
        }
    }

    private async Task HandleSignup()
    {
        var response = await Http.PostAsJsonAsync("Auth/Signup", signup);

        DialogService.Close();

        if (response.IsSuccessStatusCode)
        {
            await DialogService.Alert("Success", "Sign up success", new AlertOptions() { OkButtonText = "OK" });
            isSignup = false;
        }
        else
        {

        }
    }


    private async Task StartSSOLogin()
    {
        var url = authService.GetSSOLoginUrl();
        await jsRuntime.InvokeVoidAsync("eval", $"window.location.href = '{url}'");
    }

    private void StartGoBack()
    {
        NavigationManager.NavigateTo("/");
    }
}

<style>
    .fullscreen-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }
</style>